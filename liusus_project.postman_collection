{
	"info": {
		"_postman_id": "a43ac373-b376-41bd-b43e-3fc01537595a",
		"name": "Final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20401912"
	},
	"item": [
		{
			"name": "get users",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boats with valid jwt (option to choose json or html)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "jwt",
						"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImIxYTgyNTllYjA3NjYwZWYyMzc4MWM4NWI3ODQ5YmZhMGExYzgwNmMiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI0OTk5Mzg4ODI4MzctYzZydXJqY2VvamxuY3NqMDEwdmZzcGg3ZDZhb2F1a3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI0OTk5Mzg4ODI4MzctYzZydXJqY2VvamxuY3NqMDEwdmZzcGg3ZDZhb2F1a3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTgwNzc3NTIxNDQ2NzkzNjM1ODUiLCJlbWFpbCI6InN1c2FubGl1ODI1MTk5OUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6ImducUoyN05rdTZYMlByMXRnOGxzOVEiLCJuYW1lIjoiU3VzYW4gTGl1IiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hLS9BT2gxNEdnTGlfbk9lVFNpVjFtaU0yVjlwQnZpbXM1allJbDI4MkFqMXp1Tj1zOTYtYyIsImdpdmVuX25hbWUiOiJTdXNhbiIsImZhbWlseV9uYW1lIjoiTGl1IiwibG9jYWxlIjoiZW4iLCJpYXQiOjE2NTI2Nzk4OTksImV4cCI6MTY1MjY4MzQ5OX0.IwWqhFAan-TC8-jtlyGk0afzRxaIY5m8fvo_Tsoso-WwgIb7CFpvoI8iYipqNKbyjrbFbVmnw5pogBkRaNCte6BaYdre1hOObwcrUoKzmD5uYGyyso98tYeKUt7nxFngUGOlztdngMWcOnaAgZGDWjk63egPhnM_7OiOptY3wsk88ke1KPMa37H8aKQEMMZ3X9z0AK9qnVtdXbUFd53Rp9jyw8BMzuG9UFOzvhnB4MpETF_4N5YXPuarXCbUrE9yNLvnUqCVQaH2He2bt2EjD-m8ka8iLnSWGSoXGN7BjBiiEbfaDhlPZv7n4ZPD3QDDkIwWTDSRWIdTZb6YZGMw0g",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImIxYTgyNTllYjA3NjYwZWYyMzc4MWM4NWI3ODQ5YmZhMGExYzgwNmMiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI0OTk5Mzg4ODI4MzctYzZydXJqY2VvamxuY3NqMDEwdmZzcGg3ZDZhb2F1a3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI0OTk5Mzg4ODI4MzctYzZydXJqY2VvamxuY3NqMDEwdmZzcGg3ZDZhb2F1a3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTgwNzc3NTIxNDQ2NzkzNjM1ODUiLCJlbWFpbCI6InN1c2FubGl1ODI1MTk5OUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6ImducUoyN05rdTZYMlByMXRnOGxzOVEiLCJuYW1lIjoiU3VzYW4gTGl1IiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hLS9BT2gxNEdnTGlfbk9lVFNpVjFtaU0yVjlwQnZpbXM1allJbDI4MkFqMXp1Tj1zOTYtYyIsImdpdmVuX25hbWUiOiJTdXNhbiIsImZhbWlseV9uYW1lIjoiTGl1IiwibG9jYWxlIjoiZW4iLCJpYXQiOjE2NTI2Nzk4OTksImV4cCI6MTY1MjY4MzQ5OX0.IwWqhFAan-TC8-jtlyGk0afzRxaIY5m8fvo_Tsoso-WwgIb7CFpvoI8iYipqNKbyjrbFbVmnw5pogBkRaNCte6BaYdre1hOObwcrUoKzmD5uYGyyso98tYeKUt7nxFngUGOlztdngMWcOnaAgZGDWjk63egPhnM_7OiOptY3wsk88ke1KPMa37H8aKQEMMZ3X9z0AK9qnVtdXbUFd53Rp9jyw8BMzuG9UFOzvhnB4MpETF_4N5YXPuarXCbUrE9yNLvnUqCVQaH2He2bt2EjD-m8ka8iLnSWGSoXGN7BjBiiEbfaDhlPZv7n4ZPD3QDDkIwWTDSRWIdTZb6YZGMw0g",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/graphql",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boats with invalid jwt",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add boats valid jwt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);\r",
							"pm.environment.set(\"owner_id1\", pm.response.json()[\"owner\"]);\r",
							"\r",
							"// pm.test(\"201 status code\", function () {\r",
							"//     pm.response.to.have.status(201);\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"content is valid\", function () {\r",
							"//     console.log(pm.response.json()[\"name\"]);\r",
							"//     console.log(pm.response.json()[\"type\"]);\r",
							"//     console.log(pm.response.json()[\"length\"]);\r",
							"//     pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");\r",
							"//     pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");\r",
							"//     pm.expect(pm.response.json()[\"length\"]).to.eq(99);\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "jwt",
						"value": "{{jwt}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"HI Test boat\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28,\r\n    \"public\" : true\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					],
					"query": [
						{
							"key": "",
							"value": "\\",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add boats valid jwt 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);\r",
							"pm.environment.set(\"owner_id2\", pm.response.json()[\"owner\"]);\r",
							"\r",
							"// pm.test(\"201 status code\", function () {\r",
							"//     pm.response.to.have.status(201);\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"content is valid\", function () {\r",
							"//     console.log(pm.response.json()[\"name\"]);\r",
							"//     console.log(pm.response.json()[\"type\"]);\r",
							"//     console.log(pm.response.json()[\"length\"]);\r",
							"//     pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");\r",
							"//     pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");\r",
							"//     pm.expect(pm.response.json()[\"length\"]).to.eq(99);\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "jwt",
						"value": "{{jwt}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"HI Test boat\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28,\r\n    \"public\" : true\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add boats in_valid jwt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "jwt",
						"value": "{{jwt}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Food Time\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28,\r\n    \"public\" : true\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boat with valid boat_id",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/pdf",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boat with invalid boat_id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
							"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Giant LEGO Blocks\");",
							"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 5,\n  \"item\": \"Giant LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"   //Check if status code is 201",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
							"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"Giant LEGO Blocks\");",
							"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 5,\n  \"item\": \"Giant LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 204",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 15,\r\n  \"item\": \"Mini LEGO Blocks\",\r\n  \"creation_date\": \"5/27/2022\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get owner boats with owner_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users/{{owner_id}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{owner_id}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get owner boats with invalid owner_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/owners/{{invalid_owner_id}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"owners",
						"{{invalid_owner_id}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boat with boat id (json or html)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}boats/{{boat_id}}",
					"host": [
						"{{app_url}}boats"
					],
					"path": [
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat loads with valid boat_id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat loads with invalid boat_id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get loads",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for status code 204",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}/loads/{{load_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}",
						"loads",
						"{{load_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign invalid load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for status code 204",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit load info valid attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code 204",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Message\"]).to.eq(\"Success\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"Giant LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit load info invalid attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for status code 204",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit load info valid attributes invalid load_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for status code 204",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"Giant LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat 200 valid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey II\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					],
					"query": [
						{
							"key": "name",
							"value": "1",
							"disabled": true
						},
						{
							"key": "type",
							"value": "2",
							"disabled": true
						},
						{
							"key": "length",
							"value": "3",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat 200 invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					],
					"query": [
						{
							"key": "name",
							"value": "1",
							"disabled": true
						},
						{
							"key": "type",
							"value": "2",
							"disabled": true
						},
						{
							"key": "length",
							"value": "3",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat 200 valid jwt missing body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Missing\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					],
					"query": [
						{
							"key": "name",
							"value": "1",
							"disabled": true
						},
						{
							"key": "type",
							"value": "2",
							"disabled": true
						},
						{
							"key": "length",
							"value": "3",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete loads with valid boat_id and load_id",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete loads with valid boat_id and invalid load_id Copy",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete invalid boat_id with invalid_jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete invalid boat_id with valid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete valid boat_id with invalid_jwt Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete valid boat_id with valid_jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get load at load_id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		}
	]
}